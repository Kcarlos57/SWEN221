#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ Graph\ is\ the\ data\ structure\ that\ stores\ the\ collection\ of\ stops,\ lines\ and\ connections.\r\n\ The\ Graph\ constructor\ is\ passed\ a\ Map\ of\ the\ stops,\ indexed\ by\ stopId\ and\r\n\ a\ Map\ of\ the\ Lines,\ indexed\ by\ lineId.\r\n\ The\ Stops\ in\ the\ map\ have\ their\ id,\ name\ and\ GIS\ location.\r\n\ The\ Lines\ in\ the\ map\ have\ their\ id,\ and\ lists\ of\ the\ stopIDs\ and\ times\ (in\ order)\r\n\ <br>\r\n\ To\ build\ the\ actual\ graph\ structure,\ it\ is\ necessary\ to\r\n\ build\ the\ list\ of\ Edges\ out\ of\ each\ stop\ and\ the\ list\ of\ Edges\ into\ each\ stop\r\n\ Each\ pair\ of\ adjacent\ stops\ in\ a\ Line\ is\ an\ edge.\r\n\ We\ also\ need\ to\ create\ walking\ edges\ between\ every\ pair\ of\ stops\ in\ the\ whole\r\n\ network\ that\ are\ closer\ than\ walkingDistance.\r\n
comment1.params=stops\ lines
comment1.target=Graph(java.util.Collection,\ java.util.Collection)
comment1.text=\r\n\ Construct\ a\ new\ graph\ given\ a\ collection\ of\ stops\ and\ a\ collection\ of\ lines.\r\n
comment10.params=prefix
comment10.target=Stop\ getFirstMatchingStop(java.lang.String)
comment10.text=\r\n\ Return\ the\ first\ stop\ that\ starts\ with\ the\ specified\ prefix\r\n\ (first\ by\ alphabetic\ order\ of\ name)\r\n
comment11.params=prefix
comment11.target=java.util.List\ getAllMatchingStops(java.lang.String)
comment11.text=\r\n\ Return\ all\ the\ stops\ that\ start\ with\ the\ specified\ prefix\r\n\ in\ alphabetic\ order.\r\n
comment12.params=
comment12.target=int\ getSubGraphCount()
comment13.params=num
comment13.target=void\ setSubGraphCount(int)
comment14.params=
comment14.target=void\ resetSubGraphIds()
comment14.text=\r\n\ reset\ the\ subgraph\ ID\ of\ all\ stops\r\n
comment2.params=
comment2.target=void\ printGraphData()
comment2.text=\r\n\ Print\ out\ the\ lines\ and\ stops\ in\ the\ graph\ to\ System.out\r\n
comment3.params=
comment3.target=void\ createAndConnectEdges()
comment3.text=\r\n\ From\ the\ loaded\ Line\ and\ Stop\ information,\r\n\ identify\ all\ the\ edges\ that\ connect\ stops\ along\ a\ Line.\r\n\ -\ Construct\ the\ collection\ of\ all\ Edges\ in\ the\ graph\ \ and\r\n\ -\ Construct\ the\ forward\ and\ backward\ neighbour\ edges\ of\ each\ Stop.\r\n
comment4.params=
comment4.target=void\ reverseEdges()
comment4.text=\r\n\ Reverse\ the\ direction\ of\ all\ edges\ in\ the\ graph.\r\n
comment5.params=
comment5.target=void\ computeNeighbours()
comment5.text=\r\n\ Construct\ the\ undirected\ graph\ of\ neighbours\ for\ each\ Stop\:\r\n\ For\ each\ Stop,\ construct\ a\ set\ of\ the\ stops\ that\ are\ its\ neighbours\r\n\ from\ the\ forward\ and\ backward\ neighbour\ edges.\r\n\ It\ may\ assume\ that\ there\ are\ no\ walking\ edges\ at\ this\ point.\r\n
comment6.params=walkingDistance
comment6.target=void\ recomputeWalkingEdges(double)
comment6.text=\r\n\ Reconstruct\ all\ the\ current\ walking\ edges\ in\ the\ graph,\r\n\ based\ on\ the\ specified\ walkingDistance\:\r\n\ identify\ all\ pairs\ of\ stops\ *\ that\ are\ at\ most\ walkingDistance\ apart,\r\n\ and\ construct\ edges\ (both\ ways)\ between\ the\ stops\r\n\ add\ the\ edges\ to\ the\ forward\ and\ backward\ neighbouars\ of\ the\ Stops\r\n\ add\ the\ edges\ to\ the\ walking\ edges\ of\ the\ graph.\r\n\ Assume\ that\ all\ the\ previous\ walking\ edges\ have\ been\ removed\r\n
comment7.params=
comment7.target=void\ removeWalkingEdges()
comment7.text=\r\n\ Remove\ all\ the\ current\ walking\ edges\ in\ the\ graph\r\n\ -\ from\ the\ edges\ field\ (the\ collection\ of\ all\ the\ edges\ in\ the\ graph)\r\n\ -\ from\ the\ forward\ and\ backward\ neighbours\ of\ each\ Stop.\r\n\ -\ Resets\ the\ number\ of\ components\ back\ to\ 0\ by\r\n\ calling\ \ resetSubGraphIds()\r\n
comment8.params=
comment8.target=java.util.Collection\ getStops()
comment8.text=\r\n\ Return\ a\ collection\ of\ all\ the\ stops\ in\ the\ network\r\n
comment9.params=
comment9.target=java.util.Collection\ getEdges()
comment9.text=\r\n\ Return\ a\ collection\ of\ all\ the\ edges\ in\ the\ network\r\n
numComments=15
